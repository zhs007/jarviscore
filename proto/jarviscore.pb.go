// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jarviscore.proto

package jarviscorepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CODE int32

const (
	CODE_OK                 CODE = 0
	CODE_INVALID_TOKEN_NAME CODE = 1
	CODE_ALREADY_IN         CODE = 2
)

var CODE_name = map[int32]string{
	0: "OK",
	1: "INVALID_TOKEN_NAME",
	2: "ALREADY_IN",
}
var CODE_value = map[string]int32{
	"OK":                 0,
	"INVALID_TOKEN_NAME": 1,
	"ALREADY_IN":         2,
}

func (x CODE) String() string {
	return proto.EnumName(CODE_name, int32(x))
}
func (CODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{0}
}

type NODETYPE int32

const (
	NODETYPE_NORMAL  NODETYPE = 0
	NODETYPE_SH      NODETYPE = 1
	NODETYPE_TELEBOT NODETYPE = 2
)

var NODETYPE_name = map[int32]string{
	0: "NORMAL",
	1: "SH",
	2: "TELEBOT",
}
var NODETYPE_value = map[string]int32{
	"NORMAL":  0,
	"SH":      1,
	"TELEBOT": 2,
}

func (x NODETYPE) String() string {
	return proto.EnumName(NODETYPE_name, int32(x))
}
func (NODETYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{1}
}

type CHANNELTYPE int32

const (
	CHANNELTYPE_NODEINFO CHANNELTYPE = 0
)

var CHANNELTYPE_name = map[int32]string{
	0: "NODEINFO",
}
var CHANNELTYPE_value = map[string]int32{
	"NODEINFO": 0,
}

func (x CHANNELTYPE) String() string {
	return proto.EnumName(CHANNELTYPE_name, int32(x))
}
func (CHANNELTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{2}
}

type Join struct {
	ServAddr             string   `protobuf:"bytes,1,opt,name=servAddr,proto3" json:"servAddr,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NodeType             NODETYPE `protobuf:"varint,4,opt,name=nodeType,proto3,enum=jarviscorepb.NODETYPE" json:"nodeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Join) Reset()         { *m = Join{} }
func (m *Join) String() string { return proto.CompactTextString(m) }
func (*Join) ProtoMessage()    {}
func (*Join) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{0}
}
func (m *Join) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Join.Unmarshal(m, b)
}
func (m *Join) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Join.Marshal(b, m, deterministic)
}
func (dst *Join) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Join.Merge(dst, src)
}
func (m *Join) XXX_Size() int {
	return xxx_messageInfo_Join.Size(m)
}
func (m *Join) XXX_DiscardUnknown() {
	xxx_messageInfo_Join.DiscardUnknown(m)
}

var xxx_messageInfo_Join proto.InternalMessageInfo

func (m *Join) GetServAddr() string {
	if m != nil {
		return m.ServAddr
	}
	return ""
}

func (m *Join) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Join) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Join) GetNodeType() NODETYPE {
	if m != nil {
		return m.NodeType
	}
	return NODETYPE_NORMAL
}

type ReplyJoin struct {
	Code                 CODE     `protobuf:"varint,1,opt,name=code,proto3,enum=jarviscorepb.CODE" json:"code,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NodeType             NODETYPE `protobuf:"varint,4,opt,name=nodeType,proto3,enum=jarviscorepb.NODETYPE" json:"nodeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyJoin) Reset()         { *m = ReplyJoin{} }
func (m *ReplyJoin) String() string { return proto.CompactTextString(m) }
func (*ReplyJoin) ProtoMessage()    {}
func (*ReplyJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{1}
}
func (m *ReplyJoin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyJoin.Unmarshal(m, b)
}
func (m *ReplyJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyJoin.Marshal(b, m, deterministic)
}
func (dst *ReplyJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyJoin.Merge(dst, src)
}
func (m *ReplyJoin) XXX_Size() int {
	return xxx_messageInfo_ReplyJoin.Size(m)
}
func (m *ReplyJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyJoin.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyJoin proto.InternalMessageInfo

func (m *ReplyJoin) GetCode() CODE {
	if m != nil {
		return m.Code
	}
	return CODE_OK
}

func (m *ReplyJoin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReplyJoin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReplyJoin) GetNodeType() NODETYPE {
	if m != nil {
		return m.NodeType
	}
	return NODETYPE_NORMAL
}

type Subscribe struct {
	ChannelType          CHANNELTYPE `protobuf:"varint,1,opt,name=channelType,proto3,enum=jarviscorepb.CHANNELTYPE" json:"channelType,omitempty"`
	Token                string      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Subscribe) Reset()         { *m = Subscribe{} }
func (m *Subscribe) String() string { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()    {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{2}
}
func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscribe.Unmarshal(m, b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
}
func (dst *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(dst, src)
}
func (m *Subscribe) XXX_Size() int {
	return xxx_messageInfo_Subscribe.Size(m)
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetChannelType() CHANNELTYPE {
	if m != nil {
		return m.ChannelType
	}
	return CHANNELTYPE_NODEINFO
}

func (m *Subscribe) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type NodeInfo struct {
	ServAddr             string   `protobuf:"bytes,1,opt,name=servAddr,proto3" json:"servAddr,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NodeType             NODETYPE `protobuf:"varint,4,opt,name=nodeType,proto3,enum=jarviscorepb.NODETYPE" json:"nodeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{3}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (dst *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(dst, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetServAddr() string {
	if m != nil {
		return m.ServAddr
	}
	return ""
}

func (m *NodeInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInfo) GetNodeType() NODETYPE {
	if m != nil {
		return m.NodeType
	}
	return NODETYPE_NORMAL
}

type ChannelInfo struct {
	ChannelType          CHANNELTYPE `protobuf:"varint,1,opt,name=channelType,proto3,enum=jarviscorepb.CHANNELTYPE" json:"channelType,omitempty"`
	NodeInfo             *NodeInfo   `protobuf:"bytes,2,opt,name=nodeInfo,proto3" json:"nodeInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ChannelInfo) Reset()         { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()    {}
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_09bc36a9117e7883, []int{4}
}
func (m *ChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInfo.Unmarshal(m, b)
}
func (m *ChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInfo.Marshal(b, m, deterministic)
}
func (dst *ChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfo.Merge(dst, src)
}
func (m *ChannelInfo) XXX_Size() int {
	return xxx_messageInfo_ChannelInfo.Size(m)
}
func (m *ChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfo proto.InternalMessageInfo

func (m *ChannelInfo) GetChannelType() CHANNELTYPE {
	if m != nil {
		return m.ChannelType
	}
	return CHANNELTYPE_NODEINFO
}

func (m *ChannelInfo) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Join)(nil), "jarviscorepb.Join")
	proto.RegisterType((*ReplyJoin)(nil), "jarviscorepb.ReplyJoin")
	proto.RegisterType((*Subscribe)(nil), "jarviscorepb.Subscribe")
	proto.RegisterType((*NodeInfo)(nil), "jarviscorepb.NodeInfo")
	proto.RegisterType((*ChannelInfo)(nil), "jarviscorepb.ChannelInfo")
	proto.RegisterEnum("jarviscorepb.CODE", CODE_name, CODE_value)
	proto.RegisterEnum("jarviscorepb.NODETYPE", NODETYPE_name, NODETYPE_value)
	proto.RegisterEnum("jarviscorepb.CHANNELTYPE", CHANNELTYPE_name, CHANNELTYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JarvisCoreServClient is the client API for JarvisCoreServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JarvisCoreServClient interface {
	Join(ctx context.Context, in *Join, opts ...grpc.CallOption) (*ReplyJoin, error)
	Subscribe(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (JarvisCoreServ_SubscribeClient, error)
}

type jarvisCoreServClient struct {
	cc *grpc.ClientConn
}

func NewJarvisCoreServClient(cc *grpc.ClientConn) JarvisCoreServClient {
	return &jarvisCoreServClient{cc}
}

func (c *jarvisCoreServClient) Join(ctx context.Context, in *Join, opts ...grpc.CallOption) (*ReplyJoin, error) {
	out := new(ReplyJoin)
	err := c.cc.Invoke(ctx, "/jarviscorepb.JarvisCoreServ/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCoreServClient) Subscribe(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (JarvisCoreServ_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JarvisCoreServ_serviceDesc.Streams[0], "/jarviscorepb.JarvisCoreServ/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &jarvisCoreServSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JarvisCoreServ_SubscribeClient interface {
	Recv() (*ChannelInfo, error)
	grpc.ClientStream
}

type jarvisCoreServSubscribeClient struct {
	grpc.ClientStream
}

func (x *jarvisCoreServSubscribeClient) Recv() (*ChannelInfo, error) {
	m := new(ChannelInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JarvisCoreServServer is the server API for JarvisCoreServ service.
type JarvisCoreServServer interface {
	Join(context.Context, *Join) (*ReplyJoin, error)
	Subscribe(*Subscribe, JarvisCoreServ_SubscribeServer) error
}

func RegisterJarvisCoreServServer(s *grpc.Server, srv JarvisCoreServServer) {
	s.RegisterService(&_JarvisCoreServ_serviceDesc, srv)
}

func _JarvisCoreServ_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Join)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCoreServServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscorepb.JarvisCoreServ/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCoreServServer).Join(ctx, req.(*Join))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCoreServ_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JarvisCoreServServer).Subscribe(m, &jarvisCoreServSubscribeServer{stream})
}

type JarvisCoreServ_SubscribeServer interface {
	Send(*ChannelInfo) error
	grpc.ServerStream
}

type jarvisCoreServSubscribeServer struct {
	grpc.ServerStream
}

func (x *jarvisCoreServSubscribeServer) Send(m *ChannelInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _JarvisCoreServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jarviscorepb.JarvisCoreServ",
	HandlerType: (*JarvisCoreServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "join",
			Handler:    _JarvisCoreServ_Join_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _JarvisCoreServ_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jarviscore.proto",
}

func init() { proto.RegisterFile("jarviscore.proto", fileDescriptor_jarviscore_09bc36a9117e7883) }

var fileDescriptor_jarviscore_09bc36a9117e7883 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xc1, 0x6f, 0x94, 0x40,
	0x14, 0xc6, 0x99, 0x15, 0xd7, 0xdd, 0x47, 0x43, 0x26, 0x2f, 0xa6, 0xe2, 0x7a, 0x69, 0x38, 0x98,
	0x66, 0x4d, 0x36, 0x06, 0xa3, 0x17, 0x4f, 0x08, 0x63, 0x4a, 0x4b, 0x07, 0xc3, 0x12, 0x93, 0x5e,
	0xdc, 0x2c, 0x30, 0xc6, 0xad, 0x95, 0x21, 0x43, 0xdd, 0xa4, 0x17, 0xe3, 0xc1, 0xa3, 0x17, 0xff,
	0x63, 0xc3, 0x50, 0xe9, 0x16, 0xbd, 0x19, 0xe3, 0x8d, 0x79, 0xef, 0xcd, 0xf7, 0x7e, 0xef, 0xf1,
	0x0d, 0xd0, 0xf3, 0xb5, 0xda, 0x6e, 0x9a, 0x42, 0x2a, 0xb1, 0xa8, 0x95, 0xbc, 0x94, 0xb8, 0x77,
	0x13, 0xa9, 0x73, 0xf7, 0x2b, 0x01, 0xf3, 0x58, 0x6e, 0x2a, 0x9c, 0xc1, 0xa4, 0x11, 0x6a, 0xeb,
	0x97, 0xa5, 0x72, 0xc8, 0x01, 0x39, 0x9c, 0xa6, 0xfd, 0x19, 0xef, 0xc3, 0xdd, 0x4b, 0xf9, 0x51,
	0x54, 0xce, 0x48, 0x27, 0xba, 0x03, 0x22, 0x98, 0xd5, 0xfa, 0x93, 0x70, 0xee, 0xe8, 0xa0, 0xfe,
	0x46, 0x0f, 0x26, 0x95, 0x2c, 0x45, 0x76, 0x55, 0x0b, 0xc7, 0x3c, 0x20, 0x87, 0xb6, 0xb7, 0xbf,
	0xd8, 0xed, 0xb7, 0xe0, 0x49, 0xc8, 0xb2, 0xb3, 0x37, 0x2c, 0xed, 0xeb, 0xdc, 0x1f, 0x04, 0xa6,
	0xa9, 0xa8, 0x2f, 0xae, 0x34, 0xc7, 0x63, 0x30, 0x0b, 0x59, 0x0a, 0xcd, 0x60, 0x7b, 0x78, 0xfb,
	0x76, 0x90, 0x84, 0x2c, 0xd5, 0xf9, 0x7f, 0xcc, 0xf4, 0x0e, 0xa6, 0xcb, 0xcf, 0x79, 0x53, 0xa8,
	0x4d, 0x2e, 0xf0, 0x25, 0x58, 0xc5, 0x87, 0x75, 0x55, 0x89, 0x0b, 0xad, 0xd1, 0x91, 0x3d, 0x1c,
	0x90, 0x1d, 0xf9, 0x9c, 0xb3, 0x58, 0xcb, 0xec, 0x56, 0xff, 0x99, 0xd3, 0xfd, 0x46, 0x60, 0xc2,
	0x65, 0x29, 0xa2, 0xea, 0xbd, 0xfc, 0x8f, 0xab, 0xff, 0x02, 0x56, 0xd0, 0xb1, 0x6a, 0x90, 0xbf,
	0x1a, 0xf4, 0xba, 0x7f, 0x2b, 0xa4, 0x61, 0xad, 0xdf, 0xfa, 0x5f, 0x67, 0xd3, 0xbe, 0x6e, 0xfe,
	0x02, 0xcc, 0xf6, 0x97, 0xe2, 0x18, 0x46, 0xc9, 0x09, 0x35, 0x70, 0x1f, 0x30, 0xe2, 0x6f, 0xfd,
	0x38, 0x0a, 0x57, 0x59, 0x72, 0xc2, 0xf8, 0x8a, 0xfb, 0xa7, 0x8c, 0x12, 0xb4, 0x01, 0xfc, 0x38,
	0x65, 0x7e, 0x78, 0xb6, 0x8a, 0x38, 0x1d, 0xcd, 0x9f, 0xc0, 0xe4, 0xd7, 0x34, 0x08, 0x30, 0xe6,
	0x49, 0x7a, 0xea, 0xc7, 0xd4, 0x68, 0x75, 0x96, 0x47, 0x94, 0xa0, 0x05, 0xf7, 0x32, 0x16, 0xb3,
	0x57, 0x49, 0x46, 0x47, 0xf3, 0x47, 0x60, 0xed, 0x40, 0xe3, 0x5e, 0x77, 0x37, 0xe2, 0xaf, 0x13,
	0x6a, 0x78, 0xdf, 0x09, 0xd8, 0xc7, 0x9a, 0x32, 0x90, 0x4a, 0x2c, 0x85, 0xda, 0xe2, 0x73, 0x30,
	0xcf, 0x5b, 0x27, 0x0e, 0xbc, 0xd7, 0xba, 0x73, 0xf6, 0xe0, 0x76, 0xac, 0xb7, 0xad, 0x6b, 0x60,
	0x00, 0xd3, 0xa6, 0xb7, 0xcc, 0xa0, 0xae, 0xf7, 0xd2, 0x6c, 0xb8, 0xcd, 0x9b, 0xed, 0xbb, 0xc6,
	0x53, 0x92, 0x8f, 0xf5, 0x1b, 0x7d, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xd4, 0xf6, 0x9f,
	0xb7, 0x03, 0x00, 0x00,
}
