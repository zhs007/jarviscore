// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jarviscore.proto

package jarviscorepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CODE int32

const (
	CODE_OK CODE = 0
	// addr fail
	CODE_INVALID_ADDR CODE = 1
	// already in
	CODE_ALREADY_IN CODE = 2
	// forward msg
	CODE_FORWARD_MSG CODE = 3
	// broadcast msg
	CODE_BROADCAST_MSG CODE = 4
	// no ctrl module
	CODE_NOCTRLMOD CODE = 5
	// client already start
	CODE_CLIENT_ALREADY_START CODE = 6
	// verify fail
	CODE_VERIFY_FAIL CODE = 7
	// invalid public key
	CODE_INVALID_PUBLICKEY CODE = 8
	// invalid file read size
	CODE_INVALID_FILEREADSIZE CODE = 9
	// sign fail
	CODE_SIGN_FAIL CODE = 10
	// invalid code
	CODE_INVALID_CODE CODE = 11
	// leveldb iter error
	CODE_LEVELDB_ITER_ERROR CODE = 12
	// node not connect me
	CODE_NODE_NOT_CONNECTME CODE = 20
	// not connect node
	CODE_NOT_CONNECTNODE CODE = 21
	// NodeInfoInDB decode fail
	CODE_NODEINFOINDB_DECODE_FAIL CODE = 110
	// NodeInfoInDB encode fail
	CODE_NODEINFOINDB_ENCODE_FAIL CODE = 111
	// coredb open fail
	CODE_COREDB_OPEN_FAIL CODE = 120
	// coredb nodeinfo put fail
	CODE_COREDB_NODEINFO_PUT_FAIL CODE = 121
	// coredb no addr
	CODE_COREDB_NO_ADDR CODE = 122
	// encode CtrlDataInDB fail
	CODE_CTRLDATAINDB_ENCODE_FAIL CODE = 200
	// decode CtrlDataInDB fail
	CODE_CTRLDATAINDB_DECODE_FAIL CODE = 201
	// save CtrlDataInDB fail
	CODE_CTRLDB_SAVE_CTRLDATA_FAIL CODE = 202
	// ctrldb exist strlid
	CODE_CTRLDB_EXIST_CTRLID CODE = 203
	// ctrldb not exist strlid
	CODE_CTRLDB_NOT_EXIST_CTRLID CODE = 204
)

var CODE_name = map[int32]string{
	0:   "OK",
	1:   "INVALID_ADDR",
	2:   "ALREADY_IN",
	3:   "FORWARD_MSG",
	4:   "BROADCAST_MSG",
	5:   "NOCTRLMOD",
	6:   "CLIENT_ALREADY_START",
	7:   "VERIFY_FAIL",
	8:   "INVALID_PUBLICKEY",
	9:   "INVALID_FILEREADSIZE",
	10:  "SIGN_FAIL",
	11:  "INVALID_CODE",
	12:  "LEVELDB_ITER_ERROR",
	20:  "NODE_NOT_CONNECTME",
	21:  "NOT_CONNECTNODE",
	110: "NODEINFOINDB_DECODE_FAIL",
	111: "NODEINFOINDB_ENCODE_FAIL",
	120: "COREDB_OPEN_FAIL",
	121: "COREDB_NODEINFO_PUT_FAIL",
	122: "COREDB_NO_ADDR",
	200: "CTRLDATAINDB_ENCODE_FAIL",
	201: "CTRLDATAINDB_DECODE_FAIL",
	202: "CTRLDB_SAVE_CTRLDATA_FAIL",
	203: "CTRLDB_EXIST_CTRLID",
	204: "CTRLDB_NOT_EXIST_CTRLID",
}
var CODE_value = map[string]int32{
	"OK":                        0,
	"INVALID_ADDR":              1,
	"ALREADY_IN":                2,
	"FORWARD_MSG":               3,
	"BROADCAST_MSG":             4,
	"NOCTRLMOD":                 5,
	"CLIENT_ALREADY_START":      6,
	"VERIFY_FAIL":               7,
	"INVALID_PUBLICKEY":         8,
	"INVALID_FILEREADSIZE":      9,
	"SIGN_FAIL":                 10,
	"INVALID_CODE":              11,
	"LEVELDB_ITER_ERROR":        12,
	"NODE_NOT_CONNECTME":        20,
	"NOT_CONNECTNODE":           21,
	"NODEINFOINDB_DECODE_FAIL":  110,
	"NODEINFOINDB_ENCODE_FAIL":  111,
	"COREDB_OPEN_FAIL":          120,
	"COREDB_NODEINFO_PUT_FAIL":  121,
	"COREDB_NO_ADDR":            122,
	"CTRLDATAINDB_ENCODE_FAIL":  200,
	"CTRLDATAINDB_DECODE_FAIL":  201,
	"CTRLDB_SAVE_CTRLDATA_FAIL": 202,
	"CTRLDB_EXIST_CTRLID":       203,
	"CTRLDB_NOT_EXIST_CTRLID":   204,
}

func (x CODE) String() string {
	return proto.EnumName(CODE_name, int32(x))
}
func (CODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{0}
}

type NODETYPE int32

const (
	NODETYPE_NORMAL  NODETYPE = 0
	NODETYPE_SH      NODETYPE = 1
	NODETYPE_TELEBOT NODETYPE = 2
)

var NODETYPE_name = map[int32]string{
	0: "NORMAL",
	1: "SH",
	2: "TELEBOT",
}
var NODETYPE_value = map[string]int32{
	"NORMAL":  0,
	"SH":      1,
	"TELEBOT": 2,
}

func (x NODETYPE) String() string {
	return proto.EnumName(NODETYPE_name, int32(x))
}
func (NODETYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{1}
}

type CHANNELTYPE int32

const (
	CHANNELTYPE_NODEINFO CHANNELTYPE = 0
	CHANNELTYPE_CTRL     CHANNELTYPE = 1
)

var CHANNELTYPE_name = map[int32]string{
	0: "NODEINFO",
	1: "CTRL",
}
var CHANNELTYPE_value = map[string]int32{
	"NODEINFO": 0,
	"CTRL":     1,
}

func (x CHANNELTYPE) String() string {
	return proto.EnumName(CHANNELTYPE_name, int32(x))
}
func (CHANNELTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{2}
}

type CTRLTYPE int32

const (
	CTRLTYPE_SHELL CTRLTYPE = 0
	CTRLTYPE_FILE  CTRLTYPE = 2
)

var CTRLTYPE_name = map[int32]string{
	0: "SHELL",
	2: "FILE",
}
var CTRLTYPE_value = map[string]int32{
	"SHELL": 0,
	"FILE":  2,
}

func (x CTRLTYPE) String() string {
	return proto.EnumName(CTRLTYPE_name, int32(x))
}
func (CTRLTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{3}
}

type PrivateKey struct {
	PriKey               []byte   `protobuf:"bytes,1,opt,name=priKey,proto3" json:"priKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateKey) Reset()         { *m = PrivateKey{} }
func (m *PrivateKey) String() string { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()    {}
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{0}
}
func (m *PrivateKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateKey.Unmarshal(m, b)
}
func (m *PrivateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateKey.Marshal(b, m, deterministic)
}
func (dst *PrivateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateKey.Merge(dst, src)
}
func (m *PrivateKey) XXX_Size() int {
	return xxx_messageInfo_PrivateKey.Size(m)
}
func (m *PrivateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateKey.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateKey proto.InternalMessageInfo

func (m *PrivateKey) GetPriKey() []byte {
	if m != nil {
		return m.PriKey
	}
	return nil
}

type PublicKey struct {
	PubKey               []byte   `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{1}
}
func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (dst *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(dst, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type NodeInfo struct {
	ServAddr             string   `protobuf:"bytes,1,opt,name=servAddr,proto3" json:"servAddr,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NodeType             NODETYPE `protobuf:"varint,4,opt,name=nodeType,proto3,enum=jarviscorepb.NODETYPE" json:"nodeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{2}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (dst *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(dst, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetServAddr() string {
	if m != nil {
		return m.ServAddr
	}
	return ""
}

func (m *NodeInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInfo) GetNodeType() NODETYPE {
	if m != nil {
		return m.NodeType
	}
	return NODETYPE_NORMAL
}

type NodeInfoInDB struct {
	NodeInfo             *NodeInfo `protobuf:"bytes,1,opt,name=nodeInfo,proto3" json:"nodeInfo,omitempty"`
	ConnectNums          int32     `protobuf:"varint,2,opt,name=connectNums,proto3" json:"connectNums,omitempty"`
	ConnectedNums        int32     `protobuf:"varint,3,opt,name=connectedNums,proto3" json:"connectedNums,omitempty"`
	Ctrlid               int64     `protobuf:"varint,4,opt,name=ctrlid,proto3" json:"ctrlid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeInfoInDB) Reset()         { *m = NodeInfoInDB{} }
func (m *NodeInfoInDB) String() string { return proto.CompactTextString(m) }
func (*NodeInfoInDB) ProtoMessage()    {}
func (*NodeInfoInDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{3}
}
func (m *NodeInfoInDB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfoInDB.Unmarshal(m, b)
}
func (m *NodeInfoInDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfoInDB.Marshal(b, m, deterministic)
}
func (dst *NodeInfoInDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfoInDB.Merge(dst, src)
}
func (m *NodeInfoInDB) XXX_Size() int {
	return xxx_messageInfo_NodeInfoInDB.Size(m)
}
func (m *NodeInfoInDB) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfoInDB.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfoInDB proto.InternalMessageInfo

func (m *NodeInfoInDB) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *NodeInfoInDB) GetConnectNums() int32 {
	if m != nil {
		return m.ConnectNums
	}
	return 0
}

func (m *NodeInfoInDB) GetConnectedNums() int32 {
	if m != nil {
		return m.ConnectedNums
	}
	return 0
}

func (m *NodeInfoInDB) GetCtrlid() int64 {
	if m != nil {
		return m.Ctrlid
	}
	return 0
}

type CtrlDataInDB struct {
	Ctrlid               int64    `protobuf:"varint,1,opt,name=ctrlid,proto3" json:"ctrlid,omitempty"`
	CtrlType             CTRLTYPE `protobuf:"varint,2,opt,name=ctrlType,proto3,enum=jarviscorepb.CTRLTYPE" json:"ctrlType,omitempty"`
	ForwordAddr          string   `protobuf:"bytes,3,opt,name=forwordAddr,proto3" json:"forwordAddr,omitempty"`
	Command              []byte   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	Result               []byte   `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	ForwordNums          int32    `protobuf:"varint,6,opt,name=forwordNums,proto3" json:"forwordNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CtrlDataInDB) Reset()         { *m = CtrlDataInDB{} }
func (m *CtrlDataInDB) String() string { return proto.CompactTextString(m) }
func (*CtrlDataInDB) ProtoMessage()    {}
func (*CtrlDataInDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{4}
}
func (m *CtrlDataInDB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CtrlDataInDB.Unmarshal(m, b)
}
func (m *CtrlDataInDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CtrlDataInDB.Marshal(b, m, deterministic)
}
func (dst *CtrlDataInDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtrlDataInDB.Merge(dst, src)
}
func (m *CtrlDataInDB) XXX_Size() int {
	return xxx_messageInfo_CtrlDataInDB.Size(m)
}
func (m *CtrlDataInDB) XXX_DiscardUnknown() {
	xxx_messageInfo_CtrlDataInDB.DiscardUnknown(m)
}

var xxx_messageInfo_CtrlDataInDB proto.InternalMessageInfo

func (m *CtrlDataInDB) GetCtrlid() int64 {
	if m != nil {
		return m.Ctrlid
	}
	return 0
}

func (m *CtrlDataInDB) GetCtrlType() CTRLTYPE {
	if m != nil {
		return m.CtrlType
	}
	return CTRLTYPE_SHELL
}

func (m *CtrlDataInDB) GetForwordAddr() string {
	if m != nil {
		return m.ForwordAddr
	}
	return ""
}

func (m *CtrlDataInDB) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CtrlDataInDB) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CtrlDataInDB) GetForwordNums() int32 {
	if m != nil {
		return m.ForwordNums
	}
	return 0
}

type Join struct {
	ServAddr             string   `protobuf:"bytes,1,opt,name=servAddr,proto3" json:"servAddr,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NodeType             NODETYPE `protobuf:"varint,4,opt,name=nodeType,proto3,enum=jarviscorepb.NODETYPE" json:"nodeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Join) Reset()         { *m = Join{} }
func (m *Join) String() string { return proto.CompactTextString(m) }
func (*Join) ProtoMessage()    {}
func (*Join) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{5}
}
func (m *Join) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Join.Unmarshal(m, b)
}
func (m *Join) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Join.Marshal(b, m, deterministic)
}
func (dst *Join) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Join.Merge(dst, src)
}
func (m *Join) XXX_Size() int {
	return xxx_messageInfo_Join.Size(m)
}
func (m *Join) XXX_DiscardUnknown() {
	xxx_messageInfo_Join.DiscardUnknown(m)
}

var xxx_messageInfo_Join proto.InternalMessageInfo

func (m *Join) GetServAddr() string {
	if m != nil {
		return m.ServAddr
	}
	return ""
}

func (m *Join) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Join) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Join) GetNodeType() NODETYPE {
	if m != nil {
		return m.NodeType
	}
	return NODETYPE_NORMAL
}

type ReplyJoin struct {
	Code                 CODE     `protobuf:"varint,1,opt,name=code,proto3,enum=jarviscorepb.CODE" json:"code,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NodeType             NODETYPE `protobuf:"varint,4,opt,name=nodeType,proto3,enum=jarviscorepb.NODETYPE" json:"nodeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyJoin) Reset()         { *m = ReplyJoin{} }
func (m *ReplyJoin) String() string { return proto.CompactTextString(m) }
func (*ReplyJoin) ProtoMessage()    {}
func (*ReplyJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{6}
}
func (m *ReplyJoin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyJoin.Unmarshal(m, b)
}
func (m *ReplyJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyJoin.Marshal(b, m, deterministic)
}
func (dst *ReplyJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyJoin.Merge(dst, src)
}
func (m *ReplyJoin) XXX_Size() int {
	return xxx_messageInfo_ReplyJoin.Size(m)
}
func (m *ReplyJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyJoin.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyJoin proto.InternalMessageInfo

func (m *ReplyJoin) GetCode() CODE {
	if m != nil {
		return m.Code
	}
	return CODE_OK
}

func (m *ReplyJoin) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReplyJoin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReplyJoin) GetNodeType() NODETYPE {
	if m != nil {
		return m.NodeType
	}
	return NODETYPE_NORMAL
}

type BaseReply struct {
	Code                 CODE     `protobuf:"varint,1,opt,name=code,proto3,enum=jarviscorepb.CODE" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseReply) Reset()         { *m = BaseReply{} }
func (m *BaseReply) String() string { return proto.CompactTextString(m) }
func (*BaseReply) ProtoMessage()    {}
func (*BaseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{7}
}
func (m *BaseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseReply.Unmarshal(m, b)
}
func (m *BaseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseReply.Marshal(b, m, deterministic)
}
func (dst *BaseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseReply.Merge(dst, src)
}
func (m *BaseReply) XXX_Size() int {
	return xxx_messageInfo_BaseReply.Size(m)
}
func (m *BaseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseReply proto.InternalMessageInfo

func (m *BaseReply) GetCode() CODE {
	if m != nil {
		return m.Code
	}
	return CODE_OK
}

type Subscribe struct {
	ChannelType          CHANNELTYPE `protobuf:"varint,1,opt,name=channelType,proto3,enum=jarviscorepb.CHANNELTYPE" json:"channelType,omitempty"`
	Addr                 string      `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Subscribe) Reset()         { *m = Subscribe{} }
func (m *Subscribe) String() string { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()    {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{8}
}
func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscribe.Unmarshal(m, b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
}
func (dst *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(dst, src)
}
func (m *Subscribe) XXX_Size() int {
	return xxx_messageInfo_Subscribe.Size(m)
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetChannelType() CHANNELTYPE {
	if m != nil {
		return m.ChannelType
	}
	return CHANNELTYPE_NODEINFO
}

func (m *Subscribe) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type CtrlInfo struct {
	Ctrlid               int64    `protobuf:"varint,1,opt,name=ctrlid,proto3" json:"ctrlid,omitempty"`
	DestAddr             string   `protobuf:"bytes,2,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
	SrcAddr              string   `protobuf:"bytes,3,opt,name=srcAddr,proto3" json:"srcAddr,omitempty"`
	MyAddr               string   `protobuf:"bytes,4,opt,name=myAddr,proto3" json:"myAddr,omitempty"`
	CtrlType             CTRLTYPE `protobuf:"varint,5,opt,name=ctrlType,proto3,enum=jarviscorepb.CTRLTYPE" json:"ctrlType,omitempty"`
	Command              []byte   `protobuf:"bytes,6,opt,name=command,proto3" json:"command,omitempty"`
	ForwordNums          int32    `protobuf:"varint,7,opt,name=forwordNums,proto3" json:"forwordNums,omitempty"`
	SignR                []byte   `protobuf:"bytes,8,opt,name=signR,proto3" json:"signR,omitempty"`
	SignS                []byte   `protobuf:"bytes,9,opt,name=signS,proto3" json:"signS,omitempty"`
	PubKey               []byte   `protobuf:"bytes,10,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CtrlInfo) Reset()         { *m = CtrlInfo{} }
func (m *CtrlInfo) String() string { return proto.CompactTextString(m) }
func (*CtrlInfo) ProtoMessage()    {}
func (*CtrlInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{9}
}
func (m *CtrlInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CtrlInfo.Unmarshal(m, b)
}
func (m *CtrlInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CtrlInfo.Marshal(b, m, deterministic)
}
func (dst *CtrlInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtrlInfo.Merge(dst, src)
}
func (m *CtrlInfo) XXX_Size() int {
	return xxx_messageInfo_CtrlInfo.Size(m)
}
func (m *CtrlInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CtrlInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CtrlInfo proto.InternalMessageInfo

func (m *CtrlInfo) GetCtrlid() int64 {
	if m != nil {
		return m.Ctrlid
	}
	return 0
}

func (m *CtrlInfo) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *CtrlInfo) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *CtrlInfo) GetMyAddr() string {
	if m != nil {
		return m.MyAddr
	}
	return ""
}

func (m *CtrlInfo) GetCtrlType() CTRLTYPE {
	if m != nil {
		return m.CtrlType
	}
	return CTRLTYPE_SHELL
}

func (m *CtrlInfo) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CtrlInfo) GetForwordNums() int32 {
	if m != nil {
		return m.ForwordNums
	}
	return 0
}

func (m *CtrlInfo) GetSignR() []byte {
	if m != nil {
		return m.SignR
	}
	return nil
}

func (m *CtrlInfo) GetSignS() []byte {
	if m != nil {
		return m.SignS
	}
	return nil
}

func (m *CtrlInfo) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type CtrlResult struct {
	Ctrlid               int64    `protobuf:"varint,1,opt,name=ctrlid,proto3" json:"ctrlid,omitempty"`
	DestAddr             string   `protobuf:"bytes,2,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
	SrcAddr              string   `protobuf:"bytes,3,opt,name=srcAddr,proto3" json:"srcAddr,omitempty"`
	MyAddr               string   `protobuf:"bytes,4,opt,name=myAddr,proto3" json:"myAddr,omitempty"`
	CtrlResult           []byte   `protobuf:"bytes,5,opt,name=ctrlResult,proto3" json:"ctrlResult,omitempty"`
	ForwordNums          int32    `protobuf:"varint,6,opt,name=forwordNums,proto3" json:"forwordNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CtrlResult) Reset()         { *m = CtrlResult{} }
func (m *CtrlResult) String() string { return proto.CompactTextString(m) }
func (*CtrlResult) ProtoMessage()    {}
func (*CtrlResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{10}
}
func (m *CtrlResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CtrlResult.Unmarshal(m, b)
}
func (m *CtrlResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CtrlResult.Marshal(b, m, deterministic)
}
func (dst *CtrlResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtrlResult.Merge(dst, src)
}
func (m *CtrlResult) XXX_Size() int {
	return xxx_messageInfo_CtrlResult.Size(m)
}
func (m *CtrlResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CtrlResult.DiscardUnknown(m)
}

var xxx_messageInfo_CtrlResult proto.InternalMessageInfo

func (m *CtrlResult) GetCtrlid() int64 {
	if m != nil {
		return m.Ctrlid
	}
	return 0
}

func (m *CtrlResult) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *CtrlResult) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *CtrlResult) GetMyAddr() string {
	if m != nil {
		return m.MyAddr
	}
	return ""
}

func (m *CtrlResult) GetCtrlResult() []byte {
	if m != nil {
		return m.CtrlResult
	}
	return nil
}

func (m *CtrlResult) GetForwordNums() int32 {
	if m != nil {
		return m.ForwordNums
	}
	return 0
}

type ChannelInfo struct {
	ChannelType CHANNELTYPE `protobuf:"varint,1,opt,name=channelType,proto3,enum=jarviscorepb.CHANNELTYPE" json:"channelType,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*ChannelInfo_NodeInfo
	//	*ChannelInfo_CtrlInfo
	Data                 isChannelInfo_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChannelInfo) Reset()         { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()    {}
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarviscore_9956a1281d70525a, []int{11}
}
func (m *ChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInfo.Unmarshal(m, b)
}
func (m *ChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInfo.Marshal(b, m, deterministic)
}
func (dst *ChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfo.Merge(dst, src)
}
func (m *ChannelInfo) XXX_Size() int {
	return xxx_messageInfo_ChannelInfo.Size(m)
}
func (m *ChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfo proto.InternalMessageInfo

type isChannelInfo_Data interface {
	isChannelInfo_Data()
}

type ChannelInfo_NodeInfo struct {
	NodeInfo *NodeInfo `protobuf:"bytes,2,opt,name=nodeInfo,proto3,oneof"`
}
type ChannelInfo_CtrlInfo struct {
	CtrlInfo *CtrlInfo `protobuf:"bytes,3,opt,name=ctrlInfo,proto3,oneof"`
}

func (*ChannelInfo_NodeInfo) isChannelInfo_Data() {}
func (*ChannelInfo_CtrlInfo) isChannelInfo_Data() {}

func (m *ChannelInfo) GetData() isChannelInfo_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChannelInfo) GetChannelType() CHANNELTYPE {
	if m != nil {
		return m.ChannelType
	}
	return CHANNELTYPE_NODEINFO
}

func (m *ChannelInfo) GetNodeInfo() *NodeInfo {
	if x, ok := m.GetData().(*ChannelInfo_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (m *ChannelInfo) GetCtrlInfo() *CtrlInfo {
	if x, ok := m.GetData().(*ChannelInfo_CtrlInfo); ok {
		return x.CtrlInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChannelInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChannelInfo_OneofMarshaler, _ChannelInfo_OneofUnmarshaler, _ChannelInfo_OneofSizer, []interface{}{
		(*ChannelInfo_NodeInfo)(nil),
		(*ChannelInfo_CtrlInfo)(nil),
	}
}

func _ChannelInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChannelInfo)
	// data
	switch x := m.Data.(type) {
	case *ChannelInfo_NodeInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeInfo); err != nil {
			return err
		}
	case *ChannelInfo_CtrlInfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CtrlInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChannelInfo.Data has unexpected type %T", x)
	}
	return nil
}

func _ChannelInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChannelInfo)
	switch tag {
	case 2: // data.nodeInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodeInfo)
		err := b.DecodeMessage(msg)
		m.Data = &ChannelInfo_NodeInfo{msg}
		return true, err
	case 3: // data.ctrlInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CtrlInfo)
		err := b.DecodeMessage(msg)
		m.Data = &ChannelInfo_CtrlInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChannelInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChannelInfo)
	// data
	switch x := m.Data.(type) {
	case *ChannelInfo_NodeInfo:
		s := proto.Size(x.NodeInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChannelInfo_CtrlInfo:
		s := proto.Size(x.CtrlInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*PrivateKey)(nil), "jarviscorepb.PrivateKey")
	proto.RegisterType((*PublicKey)(nil), "jarviscorepb.PublicKey")
	proto.RegisterType((*NodeInfo)(nil), "jarviscorepb.NodeInfo")
	proto.RegisterType((*NodeInfoInDB)(nil), "jarviscorepb.NodeInfoInDB")
	proto.RegisterType((*CtrlDataInDB)(nil), "jarviscorepb.CtrlDataInDB")
	proto.RegisterType((*Join)(nil), "jarviscorepb.Join")
	proto.RegisterType((*ReplyJoin)(nil), "jarviscorepb.ReplyJoin")
	proto.RegisterType((*BaseReply)(nil), "jarviscorepb.BaseReply")
	proto.RegisterType((*Subscribe)(nil), "jarviscorepb.Subscribe")
	proto.RegisterType((*CtrlInfo)(nil), "jarviscorepb.CtrlInfo")
	proto.RegisterType((*CtrlResult)(nil), "jarviscorepb.CtrlResult")
	proto.RegisterType((*ChannelInfo)(nil), "jarviscorepb.ChannelInfo")
	proto.RegisterEnum("jarviscorepb.CODE", CODE_name, CODE_value)
	proto.RegisterEnum("jarviscorepb.NODETYPE", NODETYPE_name, NODETYPE_value)
	proto.RegisterEnum("jarviscorepb.CHANNELTYPE", CHANNELTYPE_name, CHANNELTYPE_value)
	proto.RegisterEnum("jarviscorepb.CTRLTYPE", CTRLTYPE_name, CTRLTYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JarvisCoreServClient is the client API for JarvisCoreServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JarvisCoreServClient interface {
	Join(ctx context.Context, in *Join, opts ...grpc.CallOption) (*ReplyJoin, error)
	RequestCtrl(ctx context.Context, in *CtrlInfo, opts ...grpc.CallOption) (*BaseReply, error)
	ReplyCtrl(ctx context.Context, in *CtrlResult, opts ...grpc.CallOption) (*BaseReply, error)
	Subscribe(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (JarvisCoreServ_SubscribeClient, error)
}

type jarvisCoreServClient struct {
	cc *grpc.ClientConn
}

func NewJarvisCoreServClient(cc *grpc.ClientConn) JarvisCoreServClient {
	return &jarvisCoreServClient{cc}
}

func (c *jarvisCoreServClient) Join(ctx context.Context, in *Join, opts ...grpc.CallOption) (*ReplyJoin, error) {
	out := new(ReplyJoin)
	err := c.cc.Invoke(ctx, "/jarviscorepb.JarvisCoreServ/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCoreServClient) RequestCtrl(ctx context.Context, in *CtrlInfo, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/jarviscorepb.JarvisCoreServ/requestCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCoreServClient) ReplyCtrl(ctx context.Context, in *CtrlResult, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/jarviscorepb.JarvisCoreServ/replyCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCoreServClient) Subscribe(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (JarvisCoreServ_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JarvisCoreServ_serviceDesc.Streams[0], "/jarviscorepb.JarvisCoreServ/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &jarvisCoreServSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JarvisCoreServ_SubscribeClient interface {
	Recv() (*ChannelInfo, error)
	grpc.ClientStream
}

type jarvisCoreServSubscribeClient struct {
	grpc.ClientStream
}

func (x *jarvisCoreServSubscribeClient) Recv() (*ChannelInfo, error) {
	m := new(ChannelInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JarvisCoreServServer is the server API for JarvisCoreServ service.
type JarvisCoreServServer interface {
	Join(context.Context, *Join) (*ReplyJoin, error)
	RequestCtrl(context.Context, *CtrlInfo) (*BaseReply, error)
	ReplyCtrl(context.Context, *CtrlResult) (*BaseReply, error)
	Subscribe(*Subscribe, JarvisCoreServ_SubscribeServer) error
}

func RegisterJarvisCoreServServer(s *grpc.Server, srv JarvisCoreServServer) {
	s.RegisterService(&_JarvisCoreServ_serviceDesc, srv)
}

func _JarvisCoreServ_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Join)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCoreServServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscorepb.JarvisCoreServ/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCoreServServer).Join(ctx, req.(*Join))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCoreServ_RequestCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtrlInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCoreServServer).RequestCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscorepb.JarvisCoreServ/RequestCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCoreServServer).RequestCtrl(ctx, req.(*CtrlInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCoreServ_ReplyCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtrlResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCoreServServer).ReplyCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscorepb.JarvisCoreServ/ReplyCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCoreServServer).ReplyCtrl(ctx, req.(*CtrlResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCoreServ_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JarvisCoreServServer).Subscribe(m, &jarvisCoreServSubscribeServer{stream})
}

type JarvisCoreServ_SubscribeServer interface {
	Send(*ChannelInfo) error
	grpc.ServerStream
}

type jarvisCoreServSubscribeServer struct {
	grpc.ServerStream
}

func (x *jarvisCoreServSubscribeServer) Send(m *ChannelInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _JarvisCoreServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jarviscorepb.JarvisCoreServ",
	HandlerType: (*JarvisCoreServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "join",
			Handler:    _JarvisCoreServ_Join_Handler,
		},
		{
			MethodName: "requestCtrl",
			Handler:    _JarvisCoreServ_RequestCtrl_Handler,
		},
		{
			MethodName: "replyCtrl",
			Handler:    _JarvisCoreServ_ReplyCtrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _JarvisCoreServ_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jarviscore.proto",
}

func init() { proto.RegisterFile("jarviscore.proto", fileDescriptor_jarviscore_9956a1281d70525a) }

var fileDescriptor_jarviscore_9956a1281d70525a = []byte{
	// 1070 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xb6, 0x1c, 0xd9, 0xb1, 0x8e, 0xdd, 0x74, 0xbb, 0x4d, 0x53, 0x35, 0x53, 0x4a, 0xc6, 0x14,
	0xa6, 0x13, 0x66, 0x32, 0x4c, 0x5a, 0xae, 0xb8, 0x41, 0x96, 0x36, 0x8d, 0x1a, 0x45, 0xf2, 0xac,
	0xd4, 0x40, 0x18, 0x66, 0x34, 0xb2, 0xbc, 0x05, 0x77, 0x12, 0x29, 0x48, 0x76, 0xc0, 0x5c, 0x70,
	0xc1, 0x0b, 0xc0, 0x33, 0x30, 0x3c, 0x02, 0xd7, 0x70, 0xcb, 0xdf, 0x05, 0x8f, 0xc4, 0xec, 0xae,
	0x25, 0xcb, 0x76, 0xda, 0xc9, 0x0c, 0x03, 0xdc, 0xed, 0xf9, 0xce, 0xcf, 0x7e, 0x3a, 0xfb, 0xed,
	0x59, 0x01, 0x7a, 0x19, 0x65, 0x97, 0xa3, 0x3c, 0x4e, 0x33, 0xb6, 0x77, 0x91, 0xa5, 0xe3, 0x14,
	0x77, 0xe6, 0xc8, 0xc5, 0xa0, 0xfb, 0x10, 0xa0, 0x9f, 0x8d, 0x2e, 0xa3, 0x31, 0x3b, 0x62, 0x53,
	0xbc, 0x05, 0xcd, 0x8b, 0x6c, 0x74, 0xc4, 0xa6, 0xba, 0xb2, 0xa3, 0x3c, 0xea, 0xd0, 0x99, 0xd5,
	0x7d, 0x0b, 0xb4, 0xfe, 0x64, 0x70, 0x36, 0x8a, 0x8b, 0xa0, 0xc9, 0xa0, 0x1a, 0x24, 0xac, 0xee,
	0xb7, 0x0a, 0xb4, 0xdc, 0x74, 0xc8, 0xec, 0xe4, 0x45, 0x8a, 0xb7, 0xa1, 0x95, 0xb3, 0xec, 0xd2,
	0x18, 0x0e, 0x33, 0x11, 0xa6, 0xd1, 0xd2, 0xc6, 0x18, 0xd4, 0x88, 0xe3, 0x75, 0x81, 0x8b, 0x35,
	0xc7, 0x92, 0xe8, 0x9c, 0xe9, 0x6b, 0x12, 0xe3, 0x6b, 0xbc, 0x0f, 0xad, 0x24, 0x1d, 0xb2, 0x60,
	0x7a, 0xc1, 0x74, 0x75, 0x47, 0x79, 0xb4, 0xb1, 0xbf, 0xb5, 0x57, 0x25, 0xbf, 0xe7, 0x7a, 0x16,
	0x09, 0x4e, 0xfb, 0x84, 0x96, 0x71, 0xdd, 0x1f, 0x14, 0xe8, 0x14, 0x24, 0xec, 0xc4, 0xea, 0x15,
	0x45, 0xb8, 0x2d, 0x88, 0xb4, 0x57, 0x8a, 0xcc, 0xbc, 0xb4, 0x8c, 0xc3, 0x3b, 0xd0, 0x8e, 0xd3,
	0x24, 0x61, 0xf1, 0xd8, 0x9d, 0x9c, 0xe7, 0x82, 0x67, 0x83, 0x56, 0x21, 0xfc, 0x10, 0x6e, 0xcc,
	0x4c, 0x36, 0x14, 0x31, 0x6b, 0x22, 0x66, 0x11, 0xe4, 0x9d, 0x8a, 0xc7, 0xd9, 0xd9, 0x68, 0x28,
	0xe8, 0xaf, 0xd1, 0x99, 0xd5, 0xfd, 0x4b, 0x81, 0x8e, 0x39, 0xce, 0xce, 0xac, 0x68, 0x1c, 0x09,
	0x92, 0xf3, 0x40, 0xa5, 0x1a, 0xc8, 0xc9, 0xf3, 0x95, 0xe8, 0x40, 0xfd, 0xaa, 0x0e, 0x98, 0x01,
	0x75, 0x64, 0x07, 0x8a, 0x38, 0x4e, 0xfe, 0x45, 0x9a, 0x7d, 0x99, 0x66, 0x43, 0xd1, 0x7c, 0xd9,
	0xd0, 0x2a, 0x84, 0x75, 0x58, 0x8f, 0xd3, 0xf3, 0xf3, 0x28, 0x91, 0xbc, 0x3a, 0xb4, 0x30, 0x39,
	0x8f, 0x8c, 0xe5, 0x93, 0xb3, 0xb1, 0xde, 0x90, 0x47, 0x2b, 0xad, 0x4a, 0x4d, 0xf1, 0xb1, 0x4d,
	0xd9, 0x90, 0x0a, 0xd4, 0xfd, 0x06, 0xd4, 0x67, 0xe9, 0x28, 0xf9, 0xdf, 0xce, 0xfd, 0x3b, 0x05,
	0x34, 0xca, 0x2e, 0xce, 0xa6, 0x82, 0xc5, 0x3b, 0xa0, 0xc6, 0xe9, 0x90, 0x09, 0x06, 0x1b, 0xfb,
	0x78, 0xa9, 0x67, 0x9e, 0x45, 0xa8, 0xf0, 0xff, 0xab, 0x8c, 0x1e, 0x83, 0xd6, 0x8b, 0x72, 0x26,
	0x48, 0x5d, 0x97, 0x50, 0xf7, 0x53, 0xd0, 0xfc, 0xc9, 0x20, 0x8f, 0xb3, 0xd1, 0x80, 0xe1, 0x0f,
	0xa0, 0x1d, 0x7f, 0x1e, 0x25, 0x09, 0x93, 0x02, 0x90, 0xb9, 0xf7, 0x96, 0x72, 0x0f, 0x0d, 0xd7,
	0x25, 0x52, 0x03, 0xd5, 0xe8, 0xab, 0x3e, 0xad, 0xfb, 0x63, 0x1d, 0x5a, 0x5c, 0x77, 0x42, 0xe4,
	0xaf, 0xd2, 0xdc, 0x36, 0xb4, 0x86, 0x2c, 0x1f, 0x1b, 0xf3, 0xe4, 0xd2, 0xe6, 0xca, 0xc9, 0xb3,
	0xb8, 0xa2, 0xab, 0xc2, 0xe4, 0xd5, 0xce, 0xa7, 0xc2, 0xa1, 0x0a, 0xc7, 0xcc, 0x5a, 0x50, 0x70,
	0xe3, 0x9a, 0x0a, 0xae, 0xe8, 0xb3, 0xb9, 0xa8, 0xcf, 0x25, 0x1d, 0xae, 0xaf, 0xe8, 0x10, 0x6f,
	0x42, 0x23, 0x1f, 0x7d, 0x96, 0x50, 0xbd, 0x25, 0x32, 0xa5, 0x51, 0xa0, 0xbe, 0xae, 0xcd, 0x51,
	0xbf, 0x32, 0xc8, 0x60, 0x61, 0x90, 0xfd, 0xa4, 0x00, 0xf0, 0x36, 0x51, 0x29, 0xfe, 0xff, 0xa6,
	0x51, 0x0f, 0x00, 0xe2, 0x72, 0xcf, 0xd9, 0xf5, 0xab, 0x20, 0xd7, 0xb8, 0x82, 0x3f, 0x2b, 0xd0,
	0x36, 0xa5, 0x02, 0xc4, 0x01, 0xff, 0x23, 0xf9, 0x3c, 0xa9, 0x8c, 0xcd, 0xfa, 0xeb, 0xc6, 0xe6,
	0x61, 0xad, 0x32, 0x38, 0x9f, 0xc8, 0xd3, 0x16, 0x59, 0x6b, 0x57, 0x65, 0x15, 0xea, 0xe3, 0x59,
	0x45, 0x64, 0xaf, 0x09, 0xea, 0x30, 0x1a, 0x47, 0xbb, 0xbf, 0xa8, 0xa0, 0xf2, 0xbb, 0x80, 0x9b,
	0x50, 0xf7, 0x8e, 0x50, 0x0d, 0x23, 0xe8, 0xd8, 0xee, 0x89, 0xe1, 0xd8, 0x56, 0x68, 0x58, 0x16,
	0x45, 0x0a, 0xde, 0x00, 0x30, 0x1c, 0x4a, 0x0c, 0xeb, 0x34, 0xb4, 0x5d, 0x54, 0xc7, 0x37, 0xa1,
	0x7d, 0xe0, 0xd1, 0x8f, 0x0c, 0x6a, 0x85, 0xc7, 0xfe, 0x53, 0xb4, 0x86, 0x6f, 0xc1, 0x8d, 0x1e,
	0xf5, 0x0c, 0xcb, 0x34, 0xfc, 0x40, 0x40, 0x2a, 0xbe, 0x01, 0x9a, 0xeb, 0x71, 0x99, 0x1d, 0x7b,
	0x16, 0x6a, 0x60, 0x1d, 0x36, 0x4d, 0xc7, 0x26, 0x6e, 0x10, 0x16, 0x95, 0xfc, 0xc0, 0xa0, 0x01,
	0x6a, 0xf2, 0x62, 0x27, 0x84, 0xda, 0x07, 0xa7, 0xe1, 0x81, 0x61, 0x3b, 0x68, 0x1d, 0xdf, 0x81,
	0x5b, 0xc5, 0xfe, 0xfd, 0xe7, 0x3d, 0xc7, 0x36, 0x8f, 0xc8, 0x29, 0x6a, 0xf1, 0x0a, 0x05, 0x7c,
	0x60, 0x3b, 0x84, 0x17, 0xf1, 0xed, 0x4f, 0x08, 0xd2, 0xf8, 0x56, 0xbe, 0xfd, 0xd4, 0x95, 0xf9,
	0x50, 0xe5, 0xcf, 0xbf, 0x0b, 0xb5, 0xf1, 0x16, 0x60, 0x87, 0x9c, 0x10, 0xc7, 0xea, 0x85, 0x76,
	0x40, 0x68, 0x48, 0x28, 0xf5, 0x28, 0xea, 0x70, 0x9c, 0x8f, 0x90, 0xd0, 0xf5, 0x82, 0xd0, 0xf4,
	0x5c, 0x97, 0x98, 0xc1, 0x31, 0x41, 0x9b, 0xf8, 0x36, 0xdc, 0xac, 0x40, 0x3c, 0x04, 0xdd, 0xc1,
	0xf7, 0x41, 0xe7, 0x2b, 0xdb, 0x3d, 0xf0, 0x6c, 0xd7, 0xea, 0x85, 0x16, 0xe1, 0xd5, 0xe5, 0xa6,
	0xc9, 0x8a, 0x97, 0xb8, 0x73, 0x6f, 0x8a, 0x37, 0x01, 0x99, 0x1e, 0x25, 0x56, 0x2f, 0xf4, 0xfa,
	0x64, 0x46, 0xf4, 0x2b, 0x9e, 0x33, 0x43, 0x8b, 0xd4, 0xb0, 0xff, 0x3c, 0x90, 0xde, 0x29, 0xc6,
	0xb0, 0x51, 0x7a, 0xe5, 0x41, 0x7c, 0x8d, 0xdf, 0x00, 0x9d, 0xb7, 0xd4, 0x32, 0x02, 0x63, 0x65,
	0x97, 0x5f, 0x95, 0x15, 0x77, 0x95, 0xe2, 0x6f, 0x0a, 0x7e, 0x00, 0xf7, 0x84, 0xbb, 0x17, 0xfa,
	0xc6, 0x09, 0x09, 0x8b, 0x50, 0xe9, 0xff, 0x5d, 0xc1, 0x3a, 0xdc, 0x9e, 0xf9, 0xc9, 0xc7, 0xb6,
	0x1f, 0x88, 0x00, 0xdb, 0x42, 0x7f, 0x28, 0xf8, 0x3e, 0xdc, 0x9d, 0x79, 0x78, 0x5f, 0x16, 0xbc,
	0x7f, 0x2a, 0xbb, 0xef, 0x42, 0xab, 0x98, 0xc4, 0x18, 0xa0, 0xe9, 0x7a, 0xf4, 0xd8, 0x70, 0x50,
	0x8d, 0x0b, 0xca, 0x3f, 0x44, 0x0a, 0x6e, 0xc3, 0x7a, 0x40, 0x1c, 0xd2, 0xf3, 0x02, 0x54, 0xdf,
	0x7d, 0x1b, 0xda, 0x15, 0xf9, 0xe3, 0x8e, 0xcc, 0xe5, 0x1f, 0x8f, 0x6a, 0xb8, 0x05, 0x2a, 0x2f,
	0x8b, 0x94, 0xdd, 0x37, 0xa1, 0x55, 0xcc, 0x28, 0xac, 0x41, 0xc3, 0x3f, 0x24, 0x8e, 0x23, 0x03,
	0xf8, 0xe1, 0xa3, 0xfa, 0xfe, 0xf7, 0x75, 0xd8, 0x78, 0x26, 0x44, 0x6e, 0xa6, 0x19, 0xf3, 0x59,
	0x76, 0x89, 0xdf, 0x07, 0xf5, 0x25, 0x7f, 0x87, 0x96, 0x06, 0x3d, 0x7f, 0x9b, 0xb6, 0xef, 0x2e,
	0x62, 0xe5, 0xa3, 0xd5, 0xad, 0xe1, 0x0f, 0xa1, 0x9d, 0xb1, 0x2f, 0x26, 0x2c, 0x1f, 0xf3, 0x7b,
	0x82, 0x5f, 0x71, 0x77, 0x96, 0x2b, 0x94, 0xaf, 0x8c, 0xa8, 0xa0, 0x65, 0x7c, 0x29, 0xf2, 0xf5,
	0xd5, 0x7c, 0x39, 0x4c, 0x5e, 0x57, 0xc1, 0x04, 0x2d, 0x2f, 0x5f, 0xa0, 0xa5, 0xb8, 0xf2, 0x69,
	0xda, 0x5e, 0x1e, 0x23, 0xf3, 0xb1, 0xd3, 0xad, 0xbd, 0xa7, 0x0c, 0x9a, 0xe2, 0x57, 0xf3, 0xf1,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xdb, 0xa9, 0xa3, 0x7e, 0x0a, 0x00, 0x00,
}
