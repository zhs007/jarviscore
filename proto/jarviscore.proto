syntax = "proto3";

package jarviscorepb;

// jarvis msg type
enum MSGTYPE {
    // null type
    NULL_TYPE = 0;
    // connect jarvis node
    CONNECT_NODE = 1;
    // request a node's child nodes
    REQUEST_NODES = 2;
    // forward message
    FORWARD_MSG = 3;
    // request a ctrl msg
    REQUEST_CTRL = 4;
    // reply a ctrl result
    REPLY_CTRL_RESULT = 5;
    // trusted node request you trust a other node
    TRUST_NODE = 6;
    // trusted node request you remove a trusted node
    RM_TRUST_NODE = 7;
    // reply msg
    REPLY = 8;
    // node info
    NODE_INFO = 9;
    // reply connect
    REPLY_CONNECT = 10;
    // local connect other
    LOCAL_CONNECT_OTHER = 11;
}

message NodeBaseInfo {
    string servAddr = 1;
    string addr = 2;
    string name = 3;
}

// ConnectInfo - used in LOCAL_CONNECT_OTHER, CONNECT_NODE
message ConnectInfo {
    string servAddr = 1;
    NodeBaseInfo myInfo = 2;
}

// message ConnectInfo {
//     string servAddr = 1;
//     string addr = 2;
//     string name = 3;
// }

message ReplyJoin {
    string addr = 1;
    string name = 2;
}

message CtrlInfo {
    int64 ctrlID = 1;
    string ctrlType = 2;
    string command = 3;
    repeated string params = 4;
}

message CtrlResult {
    int64 ctrlID = 1;
    string ctrlResult = 2;
}

// JarvisMsg - jarvis base msg
//      sign(destAddr + curTime + data + srcAddr)
message JarvisMsg {
    int64 msgID = 1;
    int64 curTime = 2;
    bytes signR = 3;
    bytes signS = 4;
    bytes pubKey = 5;
    string srcAddr = 6;
    string myAddr = 7;
    string destAddr = 8;
    MSGTYPE msgType = 9;

    oneof data {
        NodeBaseInfo nodeInfo = 100;
        CtrlInfo ctrlInfo = 101;
        CtrlResult ctrlResult = 102;
        ConnectInfo connInfo = 103;
    }
}

service JarvisCoreServ {
    rpc procMsg(JarvisMsg) returns (stream JarvisMsg) {}
}