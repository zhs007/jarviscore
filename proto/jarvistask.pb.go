// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jarvistask.proto

package jarviscorepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// jarvis task type
type TASKTYPE int32

const (
	// normal
	TASKTYPE_NORMAL TASKTYPE = 0
	// service
	TASKTYPE_SERVICE TASKTYPE = 1
)

var TASKTYPE_name = map[int32]string{
	0: "NORMAL",
	1: "SERVICE",
}
var TASKTYPE_value = map[string]int32{
	"NORMAL":  0,
	"SERVICE": 1,
}

func (x TASKTYPE) String() string {
	return proto.EnumName(TASKTYPE_name, int32(x))
}
func (TASKTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_jarvistask_ae69557b7c8220bd, []int{0}
}

// JarvisTask
type JarvisTask struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CfgFiles             map[string]string `protobuf:"bytes,2,rep,name=cfgFiles,proto3" json:"cfgFiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LogFiles             map[string]string `protobuf:"bytes,3,rep,name=logFiles,proto3" json:"logFiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TaskType             TASKTYPE          `protobuf:"varint,4,opt,name=taskType,proto3,enum=jarviscorepb.TASKTYPE" json:"taskType,omitempty"`
	CurTime              int64             `protobuf:"varint,5,opt,name=curTime,proto3" json:"curTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JarvisTask) Reset()         { *m = JarvisTask{} }
func (m *JarvisTask) String() string { return proto.CompactTextString(m) }
func (*JarvisTask) ProtoMessage()    {}
func (*JarvisTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarvistask_ae69557b7c8220bd, []int{0}
}
func (m *JarvisTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JarvisTask.Unmarshal(m, b)
}
func (m *JarvisTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JarvisTask.Marshal(b, m, deterministic)
}
func (dst *JarvisTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JarvisTask.Merge(dst, src)
}
func (m *JarvisTask) XXX_Size() int {
	return xxx_messageInfo_JarvisTask.Size(m)
}
func (m *JarvisTask) XXX_DiscardUnknown() {
	xxx_messageInfo_JarvisTask.DiscardUnknown(m)
}

var xxx_messageInfo_JarvisTask proto.InternalMessageInfo

func (m *JarvisTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JarvisTask) GetCfgFiles() map[string]string {
	if m != nil {
		return m.CfgFiles
	}
	return nil
}

func (m *JarvisTask) GetLogFiles() map[string]string {
	if m != nil {
		return m.LogFiles
	}
	return nil
}

func (m *JarvisTask) GetTaskType() TASKTYPE {
	if m != nil {
		return m.TaskType
	}
	return TASKTYPE_NORMAL
}

func (m *JarvisTask) GetCurTime() int64 {
	if m != nil {
		return m.CurTime
	}
	return 0
}

// ReplyUpdTask
type ReplyUpdTask struct {
	IsOK                 bool     `protobuf:"varint,1,opt,name=isOK,proto3" json:"isOK,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyUpdTask) Reset()         { *m = ReplyUpdTask{} }
func (m *ReplyUpdTask) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdTask) ProtoMessage()    {}
func (*ReplyUpdTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_jarvistask_ae69557b7c8220bd, []int{1}
}
func (m *ReplyUpdTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyUpdTask.Unmarshal(m, b)
}
func (m *ReplyUpdTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyUpdTask.Marshal(b, m, deterministic)
}
func (dst *ReplyUpdTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyUpdTask.Merge(dst, src)
}
func (m *ReplyUpdTask) XXX_Size() int {
	return xxx_messageInfo_ReplyUpdTask.Size(m)
}
func (m *ReplyUpdTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyUpdTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyUpdTask proto.InternalMessageInfo

func (m *ReplyUpdTask) GetIsOK() bool {
	if m != nil {
		return m.IsOK
	}
	return false
}

func init() {
	proto.RegisterType((*JarvisTask)(nil), "jarviscorepb.JarvisTask")
	proto.RegisterMapType((map[string]string)(nil), "jarviscorepb.JarvisTask.CfgFilesEntry")
	proto.RegisterMapType((map[string]string)(nil), "jarviscorepb.JarvisTask.LogFilesEntry")
	proto.RegisterType((*ReplyUpdTask)(nil), "jarviscorepb.ReplyUpdTask")
	proto.RegisterEnum("jarviscorepb.TASKTYPE", TASKTYPE_name, TASKTYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JarvisTaskServClient is the client API for JarvisTaskServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JarvisTaskServClient interface {
	UpdTask(ctx context.Context, in *JarvisTask, opts ...grpc.CallOption) (*ReplyUpdTask, error)
}

type jarvisTaskServClient struct {
	cc *grpc.ClientConn
}

func NewJarvisTaskServClient(cc *grpc.ClientConn) JarvisTaskServClient {
	return &jarvisTaskServClient{cc}
}

func (c *jarvisTaskServClient) UpdTask(ctx context.Context, in *JarvisTask, opts ...grpc.CallOption) (*ReplyUpdTask, error) {
	out := new(ReplyUpdTask)
	err := c.cc.Invoke(ctx, "/jarviscorepb.JarvisTaskServ/updTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarvisTaskServServer is the server API for JarvisTaskServ service.
type JarvisTaskServServer interface {
	UpdTask(context.Context, *JarvisTask) (*ReplyUpdTask, error)
}

func RegisterJarvisTaskServServer(s *grpc.Server, srv JarvisTaskServServer) {
	s.RegisterService(&_JarvisTaskServ_serviceDesc, srv)
}

func _JarvisTaskServ_UpdTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JarvisTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisTaskServServer).UpdTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscorepb.JarvisTaskServ/UpdTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisTaskServServer).UpdTask(ctx, req.(*JarvisTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _JarvisTaskServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jarviscorepb.JarvisTaskServ",
	HandlerType: (*JarvisTaskServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updTask",
			Handler:    _JarvisTaskServ_UpdTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jarvistask.proto",
}

func init() { proto.RegisterFile("jarvistask.proto", fileDescriptor_jarvistask_ae69557b7c8220bd) }

var fileDescriptor_jarvistask_ae69557b7c8220bd = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x80, 0xbb, 0x49, 0x7f, 0xe2, 0xb4, 0x96, 0xb0, 0x88, 0x2c, 0x3d, 0x85, 0x08, 0x12, 0x3c,
	0xe4, 0x10, 0x2f, 0xa2, 0xa7, 0x5a, 0x22, 0x68, 0xab, 0x95, 0x4d, 0x14, 0x3c, 0xa6, 0x71, 0x95,
	0x98, 0xb4, 0x09, 0x9b, 0x1f, 0xc8, 0x5b, 0xfb, 0x08, 0x92, 0x6d, 0xd2, 0x36, 0x07, 0x11, 0x6f,
	0x33, 0xb3, 0xf3, 0x7d, 0xcc, 0x0c, 0x0b, 0xea, 0x97, 0xc7, 0x8b, 0x20, 0xcd, 0xbc, 0x34, 0x34,
	0x13, 0x1e, 0x67, 0x31, 0x1e, 0x6d, 0x2b, 0x7e, 0xcc, 0x59, 0xb2, 0xd2, 0xbf, 0x25, 0x80, 0x07,
	0x51, 0x70, 0xbd, 0x34, 0xc4, 0x18, 0xba, 0x1b, 0x6f, 0xcd, 0x08, 0xd2, 0x90, 0x71, 0x44, 0x45,
	0x8c, 0x6f, 0x41, 0xf1, 0x3f, 0x3e, 0xef, 0x82, 0x88, 0xa5, 0x44, 0xd2, 0x64, 0x63, 0x68, 0x9d,
	0x9b, 0x87, 0x0e, 0x73, 0xcf, 0x9b, 0xb3, 0xba, 0xd1, 0xde, 0x64, 0xbc, 0xa4, 0x3b, 0xae, 0x72,
	0x44, 0x71, 0xed, 0x90, 0xff, 0x70, 0x2c, 0xe2, 0x96, 0xa3, 0xe1, 0xb0, 0x05, 0x4a, 0xb5, 0x86,
	0x5b, 0x26, 0x8c, 0x74, 0x35, 0x64, 0x8c, 0xad, 0xd3, 0xb6, 0xc3, 0x9d, 0x3a, 0x73, 0xf7, 0xed,
	0xd9, 0xa6, 0xbb, 0x3e, 0x4c, 0x60, 0xe0, 0xe7, 0xdc, 0x0d, 0xd6, 0x8c, 0xf4, 0x34, 0x64, 0xc8,
	0xb4, 0x49, 0x27, 0x37, 0x70, 0xdc, 0x1a, 0x16, 0xab, 0x20, 0x87, 0xac, 0xac, 0x37, 0xaf, 0x42,
	0x7c, 0x02, 0xbd, 0xc2, 0x8b, 0x72, 0x46, 0x24, 0x51, 0xdb, 0x26, 0xd7, 0xd2, 0x15, 0xaa, 0xe0,
	0xd6, 0x94, 0xff, 0x81, 0x75, 0x1d, 0x46, 0x94, 0x25, 0x51, 0xf9, 0x92, 0xbc, 0x37, 0x37, 0x0f,
	0xd2, 0xe5, 0x5c, 0xc0, 0x0a, 0x15, 0xf1, 0xc5, 0x19, 0x28, 0xcd, 0x36, 0x18, 0xa0, 0xff, 0xb4,
	0xa4, 0x8f, 0xd3, 0x85, 0xda, 0xc1, 0x43, 0x18, 0x38, 0x36, 0x7d, 0xbd, 0x9f, 0xd9, 0x2a, 0xb2,
	0x1c, 0x18, 0xef, 0xcf, 0xe6, 0x30, 0x5e, 0xe0, 0x29, 0x0c, 0xf2, 0xda, 0x4a, 0x7e, 0xbb, 0xef,
	0x64, 0xd2, 0x7e, 0x39, 0x9c, 0x45, 0xef, 0xac, 0xfa, 0xe2, 0x97, 0x5c, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x52, 0xeb, 0xc2, 0x19, 0x39, 0x02, 0x00, 0x00,
}
